!<arch>
0-isupper.c/    0           0     0     644     209       `
#include "main.h"

/**
* _isupper - checks if alphabet letter is uppercase
* @c: alphabet
*
* Return: 1 true, 0 false
*/

int _isupper(int c)
{
	if ((c >= 65) && (c <= 90))
		return (1);
	else
		return (0);
}

0-memset.c/     0           0     0     644     303       `
#include "main.h"

/**
* *_memset - fills memory with a constant byte
* @s: pointer to s
* @b: constant char b
* @n: n bytes of the memory
*
* Return: pointer to the memory area s
*/

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;
	return (s);
}

0-strcat.c/     0           0     0     644     297       `
#include "main.h"

/**
 * _strcat - concatenate two strings
 * @dest : pointer
 * @src : pointer 2
 * Return: Always 0.
 */

char *_strcat(char *dest, char *src)
{
	int a, b;

	for (a = 0; dest[a] != '\0'; a++)
		;
	for (b = 0; src[b] != '\0'; b++)
	{
		dest[a + b] = src[b];
	}
	return (dest);
}

1-isdigit.c/    0           0     0     644     187       `
/**
* _isdigit - checks if a character is digit
* @c: character
*
* Return: 1 (True), 0 (False)
*/

int _isdigit(int c)
{
	if ((c >= 48) && (c <= 57))
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     331       `
#include "main.h"

/**
* *_memcpy - copies memory area
* @dest: memory area destination
* @src: memory area source
* @n: n bytes of memory area pointing to src
*
* Return: a pointer to dest
*/


char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}

1-strncat.c/    0           0     0     644     345       `
#include "main.h"

/**
 * _strncat - function to concatenate strings
 * @dest : pointer
 * @src : pointer
 * @n : variable integer
 * Return: Always 0.
 */
char *_strncat(char *dest, char *src, int n)
{
	int a, b;

	for (a = 0; dest[a] != '\0'; a++)
		;
	for (b = 0; b < n && src[b] != '\0'; b++)
	{
		dest[a + b] = src[b];
	}
	return (dest);
}

100-atoi.c/     0           0     0     644     139       `
#include "main.h"

/**
 * _atoi - Entry point
 * @s: input
 * Return: Always 0 (Success)
 */
int _atoi(char *s)
{
	(void)s;
	return (0);
}

2-strchr.c/     0           0     0     644     318       `
#include "main.h"
#include <stddef.h>
/**
* _strchr -  locates a character in a string
* @s: string
* @c: character
*
* Return: pointer to the matched character or NULL
*/

char *_strchr(char *s, char c)
{
	while (*s)
	{
		if (*s != c)
			s++;
		else
			return (s);
	}
	if (c == '\0')
		return (s);
	return (NULL);
}

2-strlen.c/     0           0     0     644     202       `
#include "main.h"
#include <string.h>

/**
* _strlen - print out length of a string
* @s: char pointer of string
*
* Return: int;
*/
int _strlen(char *s)
{
	int len;

	len = strlen(s);
	return (len);
}
2-strncpy.c/    0           0     0     644     380       `
#include "main.h"

/**
 * _strncpy - copying two strings
 * @dest : pointer
 * @src : source pointer
 * @n : integer variable
 * Return: Always 0.
 */
char *_strncpy(char *dest, char *src, int n)
{
	int a = 0, b = 0;

	for (; a < n && src[a] != '\0'; a++)
		;
	for (; b < a && src[b] != '\0'; b++)
	{
		dest[b] = src[b];
	}
	for (; b < n; b++)
		dest[b] = '\0';
	return (dest);
}
3-islower.c/    0           0     0     644     224       `
#include <ctype.h>
#include "main.h"

/**
* _islower - check if the character is lowercase or not
* @c: character
*
* Return: Always 1 (success)
*/

int _islower(int c)
{
	if (islower(c))
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     155       `
#include "main.h"
#include <stdio.h>

/**
* _puts - Write to the standard output
* @str: string
*
* Return: void
*/

void _puts(char *str)
{
	puts(str);
}

3-strcmp.c/     0           0     0     644     280       `
#include "main.h"

/**
 * _strcmp - comparing strings
 * @s1 : var pointer
 * @s2 : pointer
 * Return: Always 0.
 */
int _strcmp(char *s1, char *s2)
{
	int a;

	for (a = 0; s1[a] != '\0' && s2[a] != '\0'; a++)
	{
		if (s1[a] != s2[a])
			return (s1[a] - s2[a]);
	}
	return (0);
}
3-strspn.c/     0           0     0     644     516       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring
 *
 * @s: segment to return bytes from
 * @accept: the bytes to include
 *
 * Return: the number of bytes in the initial segment of @s which consist only
 * of bytes from @accept
 */

unsigned int _strspn(char *s, char *accept)
{
	int i, j;
	int c = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] != 32)
		{
			for (j = 0; accept[j] != '\0'; j++)
			{
				if (s[i] == accept[j])
					c++;
			}
		}
		else
			return (c);

	}
	return (c);
}
4-isalpha.c/    0           0     0     644     221       `
#include <ctype.h>
#include "main.h"

/**
* _isalpha - check if a character is alphabet or not
* @c: character
*
* Return: Always 1 (success)
*/

int _isalpha(int c)
{
	if (isalpha(c))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     454       `
#include <stdlib.h>
#include "main.h"
/**
* _strpbrk - searchs a string for any of a set of bytes
*
* @s: the string to search
* @accept: the bytes to search for
*
* Return: a pointer to the byte in @s that matches one of the bytes in
* @accept, or NULL if no such byte is found.
*/

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
				return (s);
		}
		s++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     551       `
#include <stdlib.h>
#include "main.h"
/**
* _strstr - locates a substring
*
* @haystack: the longer string to search
* @needle: the substring to search for
*
* Return: a pointer to the beginning of the located substring, or NULL if
* the substring is not found.
*/

char *_strstr(char *haystack, char *needle)
{
	int i;
	int s = 0;

	while (needle[s] != '\0')
		s++;

	while (*haystack)
	{
		for (i = 0; needle[i]; i++)
		{
			if (haystack[i] != needle[i])
				break;
		}
		if (i != s)
			haystack++;
		else
			return (haystack);
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     234       `
#include <stdlib.h>
#include "main.h"

/**
* _abs - absolute value of an integer
* @n: integer
*
* Return: Always 0 (success)
*/

int _abs(int n)
{
	if (n > 0)
		n = n * 1;
	else if (n < 0)
		n = n * -1;
	else
		n = n;
	return (n);
}
9-strcpy.c/     0           0     0     644     278       `
#include "main.h"

/**
 * char *_strcpy - a function that copies the string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
	int i = 0;

	for (; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
_putchar.c/     0           0     0     644     241       `
#include <unistd.h>

/**
* _putchar - writes the character c to stdout
* @c: The character to print
*
* Return: On success 1.
* On error, -1 is returned, and errno is set appropriately.
*/
int _putchar(char c)
{
	return (write(1, &c, 1));
}

